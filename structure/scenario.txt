Сценарій 1.
  "Аутентифікація в системі бота"
  - Користувач вводить команду "start".
  - Система відображає привітання та просить обрати користувач є туристом чи адміністратором:
    а. Якщо користувач обирає варіант туриста:
        І. Система просить ввести прізвище та ім'я (повністю, без використання ініціалів).
        ІІ. Користувач вводить прізвище та ім'я.
        ІІ. Система перевіряє коректність введених даних:
            1) Якщо дані введені коректно система перевіряє наявність прізвища та ім'я у базі даних:
                а) Якщо користувач є в базі даних бот відображає перелік доступних команд з їх описом.
                б) Якщо користувач відсуній у базі даних бот відображає рекомендацію звернутися до турагентства.
            2) Якщо дані введені некоректно система просить повторно ввести прізвище та ім'я.
    б. Якщо користувач обирає варіант адміністратора:
        І. Система просить ввести пароль доступу (він є однаковим та відомий тільки працівникам турагентства).
        І. Користувач вводить пароль.
        ІІ. Система перевіряє чи відповідає пароль зазначеному:
            1) Якщо пароль правильний, то система відображає перелік функцій, які доступні адміністратору.
            2) Якщо пароль неправильний, то система повертається в стан до вибору варіанту.

Сценарій 2.
 "Отримання інформації про зустріч"
  - Користувач вводить команду "meeting".
  - Система відображає повідомлення, яке включає: час зустрічі, адресу місця зустрічі, карту з відображенням 
    місця зустрічі та пропозицію переглянути маршрут до місця.
  - При виборі користувачем перегляду маршруту до місця система надсилає посилання, перейшовши по якому користувач побачить маршрут.
 
Сценарій 3.
 "Отримання інформації про доступні екскурсії"
  - Користувач вводить команду "excursions".
  - Система просить обрати місто в турі з наданого списку для якого користувач хоче переглянути екскурсії.
  - Користувач обирає місто.
  - Система відображає детальну інформацію про доступні екскурсії (ті ексткурсії, які можуть бути заброньовані на день, 
    коли турист буде у вибраному місті):
        + Програма екскурсії.
        + Що ви дізнаєтесь під час екскурсії.
        + Організаційні деталі:
            * Як проходить екскурсія.
            * Що важливо знати перед бронюванням екскурсії.
            * Місце зустрічі.
            * Ціна екскурсії.
    
Сценарій 4.
 "Отримання поточного часу"
 - Користувач вводить команду "time".
 - Система відображає точний час для міста, в якому знаходиться турист.

Сценарій 5.
 "Отримання погоди"
 - Користувач вводить команду "weather".
 - Система відображає погоду на сьогодні та завтра для міста, в якому знаходиться турист.

Сценарій 6. 
 "Розсилка"
 - Адміністратор обирає функцію "Send message".
 - Система просить надіслати дані, які мають бути розіслані туристам.
 - Адміністратор надсилає дані.
 - Система просить ввести назву туру, учасникам якого мають бути розіслані дані.
 - Адміністратор вводить назву.
 - Система перевіряє наявність введеної назви в базі данних:
    а. Якщо назва туру є в базі даних:
        І. Система просить ввести дату початку туру.
        ІІ. Адміністратор вводить дату початку туру.
        ІІІ. Система перевіряє коректність введених даних:
            1) Якщо дані введені коректно система перевіряє наявність туру з заданими характеристиками у базі даних:
                а) Якщо тур є в базі даних, бот розсилає дані.
                б) Якщо тур відсуній у базі даних, бот повертається в стан до обрання функції "Send message".
            2) Якщо дані введені некоректно система просить повторно ввести дату.
    б. Якщо назва туру відсуня в базі даних бот повертається в стан до обрання функції "Send message".
        
Сценарій 7.
 "Встановлення часу зустрічі"
 - Адміністратор обирає функцію "Set meeting time".
 - Система просить ввести назву туру, для якого адміністратор хоче встановити час зустрічі.
 - Адміністратор вводить назву.
 - Система перевіряє наявність назви туру у базі даних:
    а. Якщо назва туру є в базі даних:
        І. Система просить ввести дату початку туру.
        ІІ. Адміністратор вводить дату початку туру.
        ІІІ. Система перевіряє коректність введеної дати початку туру:
            1) Якщо дата початку туру введена коректно, система перевіряє наявність туру з заданими характеристиками у базі даних:
                а) Якщо тур з заданими назвою та датою початку є в базі даних:
                    і) Система просить ввести день туру.
                    іі) Адміністратор вводить день туру.
                    ііі) Система перевіряє коректність введеного дня туру:
                        !) Якщо день туру введений коректно, система перевіряє чи не перевищує номер дня загальну кількість днів у турі:
                            |) Якщо номер дня не перевищує загальну кількість днів у турі:
                                ?) Система просить ввести час зустрічі.
                                ??) Адміністратор вводить час зустрічі.
                                ???) Система перевіряє коректність введеного часу:
                                    #) Якщо час введений коректно, то він встановлюється для туру із заданими параметрами, 
                                    запис зберігається у файлі meeting.json.
                                    ##) Якщо час введений не коректно, система просить повторно ввести його.
                            ||) Якщо номер дня перевищує загальну кількість днів у турі, система просить ввести його потворно.
                        !!) Якщо день туру введений не коректно, система просить повторно ввести день туру.
                б) Якщо тур з заданими назвою та датою початку відсуній у базі даних бот повертається в стан до обрання функції "Set meeting time".
            2) Якщо дата початку туру введена некоректно система просить повторно ввести дату.
    б. Якщо назва туру відсуня в базі даних бот повертається в стан до обрання функції "Set meeting time".

Сценарій 8.
 "Встановлення місця зустрічі"
 - Адміністратор обирає функцію "Set meeting place".
 - Система просить ввести назву туру, для якого адміністратор хоче встановити місце зустрічі.
 - Адміністратор вводить назву.
 - Система перевіряє наявність назви туру у базі даних:
    а. Якщо назва туру є в базі даних:
        І. Система просить ввести дату початку туру.
        ІІ. Адміністратор вводить дату початку туру.
        ІІІ. Система перевіряє коректність введеної дати початку туру:
            1) Якщо дата початку туру введена коректно, система перевіряє наявність туру з заданими характеристиками у базі даних:
                а) Якщо тур з заданими назвою та датою початку є в базі даних:
                    і) Система просить ввести день туру.
                    іі) Адміністратор вводить день туру.
                    ііі) Система перевіряє коректність введеного дня туру:
                        !) Якщо день туру введений коректно, система перевіряє чи не перевищує номер дня загальну кількість днів у турі:
                            |) Якщо номер дня не перевищує загальну кількість днів у турі:
                                ?) Система просить обрати із запропонованих у списку для міста туру, яке відповідає заданому дню, місце зустрічі.
                                ??) Адміністратор обирає Місце зустрічі.
                                ???) Система встановлює місце зустрічі для туру із заданими параметрами, запис зберігається у файлі meeting.json.
                            ||) Якщо номер дня перевищує загальну кількість днів у турі, система просить ввести його потворно.
                        !!) Якщо день туру введений не коректно, система просить повторно ввести день туру.
                б) Якщо тур з заданими назвою та датою початку відсуній у базі даних бот повертається в стан до обрання функції "Set meeting place".
            2) Якщо дата початку туру введена некоректно система просить повторно ввести дату.
    б. Якщо назва туру відсуня в базі даних бот повертається в стан до обрання функції "Set meeting place".
       

